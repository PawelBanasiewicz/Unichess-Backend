plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id "org.sonarqube" version "6.0.0.5145"
}

group = 'banasiewicz.pawel'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jar {
	enabled = false
}

jacoco {
	toolVersion = "0.8.12"
}

sonarqube {
	properties {
		property "sonar.projectKey", "PawelBanasiewicz_Unichess-Backend"
		property "sonar.organization", "pawelbanasiewicz"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}


repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.register('unitTest', Test) {
	description = "Run unit tests"
	group = "verification"
	include 'banasiewicz/pawel/Unichess/Backend/unit/**'
	outputs.upToDateWhen { false }
	useJUnitPlatform()
	finalizedBy 'jacocoUnitTestReport'
}

tasks.register('integrationTest', Test) {
	description = "Run integration tests"
	group = "verification"
	include 'banasiewicz/pawel/Unichess/Backend/integration/**'
	outputs.upToDateWhen { false }
	useJUnitPlatform()
	shouldRunAfter 'unitTest'
	finalizedBy 'jacocoIntegrationTestReport'
}

tasks.register('allTests') {
	description = "Run all tests (unit + integration)"
	group = "verification"
	outputs.upToDateWhen { false }
	dependsOn 'unitTest', 'integrationTest'
}

tasks.register('jacocoUnitTestReport', JacocoReport) {
	description = "Generate Jacoco coverage report for unit tests"
	group = "verification"
	dependsOn 'unitTest'

	executionData fileTree(dir: 'build/jacoco', includes: ['unitTest.exec'])

	sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(files(sourceSets.main.output))

	reports {
		html.required.set(true)
		xml.required.set(true)
	}
}

tasks.register('jacocoIntegrationTestReport', JacocoReport) {
	description = "Generate Jacoco coverage report for integration tests"
	group = "verification"
	dependsOn('integrationTest')

	executionData fileTree(dir: 'build/jacoco', includes: ['integrationTest.exec'])

	sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(files(sourceSets.main.output))

	reports {
		html.required.set(true)
		xml.required.set(true)
	}
}

tasks.named('test') {
	useJUnitPlatform()

	jvmArgs '-XX:+EnableDynamicAgentLoading'
}
